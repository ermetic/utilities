AWSTemplateFormatVersion: "2010-09-09"
Description: Ermetic AWS Control Tower management account template

# ---------------------------------------------------------------------------------------------------------------
#
#   This template allows newly added Control Tower managed accounts to be monitored automatically by Ermetic.
#   It provisions infrastructure in the Control Tower management account that allows creation of
#   Ermetic stack instances in Control Tower managed accounts whenever a new Control Tower managed account is added.
#
# ---------------------------------------------------------------------------------------------------------------

Parameters:
  ErmeticAccountId:
    Description: Ermetic AWS Account ID (12 digits).
    Type: String
    Default: "081802104111"
  ErmeticManagedAccountTemplateUrl:
    Description: Ermetic CloudFormation template URL for managed accounts.
    Type: String
    Default: "https://raw.githubusercontent.com/ermetic/utilities/main/AWS/ControlTower/cloudformation/ermetic-managed-account.yaml"
  TrailArn:
    Description: CloudTrail organizational trail ARN.
    Type: String
    Default: arn:aws:cloudtrail:<CTManagementAccountRegion>:<CTManagementAccountId>:trail/aws-controltower-BaselineCloudTrail

Resources:
  ErmeticManagedAccountStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      StackSetName: "ErmeticManagedAccountStackSet"
      Description: Ermetic managed accounts stack set
      Parameters:
        - ParameterKey: ErmeticAccountId
          ParameterValue: !Ref ErmeticAccountId
      AdministrationRoleARN: !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "role/service-role/AWSControlTowerStackSetRole" ]]
      Capabilities:
        - CAPABILITY_AUTO_EXPAND
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      ExecutionRoleName: "AWSControlTowerExecution"
      PermissionModel: SELF_MANAGED
      TemplateURL: !Ref ErmeticManagedAccountTemplateUrl

  ErmeticManagementAccountCloudWatchEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ErmeticManagementAccountCloudWatchEventsRule
      Description: Ermetic management account CloudWatch Events rule
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      State: ENABLED
      Targets:
        - Arn: !GetAtt "ErmeticManagementAccountFunction.Arn"
          Id: ErmeticManagementAccountFunction

  ErmeticManagementAccountFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          result = { "ResponseMetadata": { "HTTPStatusCode": "400" } }

          def handle_event(event, context):
              trailArn = os.environ['TrailArn']

              eventDetails = event['detail']
              eventDetailsServiceEventDetails = eventDetails['serviceEventDetails']
              eventName = eventDetails['eventName']
              eventRegionName = eventDetails['awsRegion']

              if eventName == 'CreateManagedAccount' or eventName == 'UpdateManagedAccount':
                  accountInfo = {}
                  if eventName == 'CreateManagedAccount':
                      accountInfo = eventDetailsServiceEventDetails['createManagedAccountStatus']
                  if eventName == 'UpdateManagedAccount':
                      accountInfo = eventDetailsServiceEventDetails['updateManagedAccountStatus']

                  if accountInfo['state'] == 'SUCCEEDED':
                      accountId = accountInfo['account']['accountId']

                      cloudformationClient = boto3.client('cloudformationClient')
                      stackSetName = 'ErmeticManagedAccountStackSet'
                      try:
                          result = cloudformationClient.create_stack_instances(
                              Accounts=[accountId],
                              Regions=[eventRegionName], 
                              StackSetName=stackSetName)
                          logger.info(f'{stackSetName} processed sucessfully')
                      except Exception as excption:
                          logger.error(f'Failed to create stack {stackSetName}. Exception: {exception}')
                  else:
                      logger.info(f'Skipping unsuccessful event {event}')
                      return False
              else:
                  logger.info(f'Unexpected event {event}')
      Environment:
        Variables:
          TrailArn: !Ref "TrailArn"
      Handler: index.handle_event
      MemorySize: 256
      Role: !GetAtt "ErmeticManagementAccountFunctionRole.Arn"
      Runtime: python3.7
      Timeout: 60

  ErmeticManagementAccountFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ErmeticManagementAccountFunctionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStackInstances"
                Resource: !Join [":", ["arn:aws:cloudformation", !Ref "AWS::Region", !Ref "AWS::AccountId", "stackset/ErmeticManagedAccountStackSet:*"]]
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: !Join [":", ["arn:aws:logs", !Ref "AWS::Region", !Ref "AWS::AccountId", "log-group/aws/lambda/ermetic-controltower-*"]]
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  ErmeticManagementAccountCloudWatchEventsRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "ErmeticManagementAccountFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "ErmeticManagementAccountCloudWatchEventsRule.Arn"
